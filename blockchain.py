import time
from typing import List
from block import Block
from transaction import Transaction
from pickle import dumps
from hashlib import sha256

class Blockchain(object):
    def __init__(self):
        self.chain = []
        self.current_transactions = []

        # Create the genesis block
        self.new_block(1, 100)

    def new_block(self, proof: int, prev_hash=None) -> Block:
        """
        Creates a new block in the blockchain.

        Parameters:
        [Optional] prev_hash (int): The hash of the previous block in the chain.
        proof (int): The proof of work generated by the Proof of Work algorithm.

        Returns:
        Block: The newly created block.
        """
        index, timestamp = len(self.chain) + 1, time.time()
        ph_arg = prev_hash or (self.hash(self.chain[-1]) if self.chain else None)
        block = Block(index, timestamp,proof, ph_arg)

        # Reset the current_transactions list
        self.current_transactions = []
        # Add the block to the chain
        self.chain.append(block)

        return block
    
    def new_transaction(self, sender:str, recipient:str, amount:int) -> int:
        """
        Adds a transaction to the current_transactions list
        Returns the index of the block that will hold the transaction
        """
        self.current_transactions.append(Transaction(sender, recipient, amount))
        return len(self.chain) + 1
        
    @property
    def last_block(self):
        return self.chain[-1]
    
    @staticmethod
    def hash(block:Block) -> str:
        """
        Creates a SHA-256 hash of a Block
        :param block: Block
        :return: <str>
        """
        block_str = dumps(block).encode()
        return sha256(block_str).hexdigest()
    
    def proof_of_work(self, last_proof: int) -> int:
        """
        Function the computes the proof of work 
        Simple Proof of Work Algorithm:
         - Find a number p' such that hash(pp') contains leading 4 zeroes, where p is the previous p'
         - p is the previous proof, and p' is the new proof
        :param last_proof: <int>
        :return: <int>
        """
        proof = 0
        while not self.valid_proof(last_proof, proof):
            proof += 1
        
        return proof
    
    def valid_proof(self, last_proof, proof) -> bool:
        """
        Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?
        :param last_proof: <int> Previous Proof
        :param proof: <int> Current Proof
        :return: <bool> True if correct, False if not.
        """
        guess = f'{last_proof}{proof}'.encode()
        guess_hash = sha256(guess).hexdigest()
        return guess_hash[:4] == '0000'
    

    
    

        